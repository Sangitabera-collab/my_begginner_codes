# -*- coding: utf-8 -*-
"""Beginner_to_Advance Practices(200+).py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QKKLJ-a53iwBGt1t-Vj1jnIodBuLk6uw
"""

x = 5
y = 2.5
print(type(x))
print(type(y))

a = "10"
b = 20
print(a + str(b))

a = True
b = False
print(type(a))
print(a+b)

print(7//2)
print(7/2)

print(2**3**5)

x = 7
x += 10
print(x)

s = "python"
print(s[::-1])

s = "hello world"
print(s.title())

s = "113as"
print(s.isdigit())

s = "python"
print(s.upper().lower().capitalize())

nums = [1,2,3]
nums.append([4,5])
print(nums)

nums = [1,2,3]
nums.extend([4,5])
print(nums)

nums = [1,2,3]
print(nums*2)

a = [1,2,3]
b = a
b[1] = 77
print(a)

t = (1,2,3)
print(len(t))

t = (1,)
print(type(t))

d = {"a" : 1, "b" : 6 }
print(d["a"])

d = {"x" : 1, "y" : 6 }
print(d.get("z", "not found"))

d = {}
d["name"] = "Alice"
print(d)

s = {1, 2, 3, 2, 1}
print(s)

s1 = {1, 2, 3}
s2 = {4, 5, 6}
print(s1 & s2)

s = set()
print(type(s))

x = 10
if x>5:
  print("Yes")
else:
  print("No")

a = 5
b = 10
print("equal" if a == b else "not equal")

for i in range(1, 3):
  print(i, end ="")

def add(a, b=5):
  return a + b
print(add(10))

def f(x):
    return x * x
print(f(3))

def greet():
  print("Hello")
greet()

x = [1,2,3]
y = x
y.append(4)
print(x)

a = [1, 2, 3]
b = a[:]
b.append(4)
print(a, b)

x = "python"
print(x[::-1], x[::2])

x = (1, 2, 3)
y = (1, 2, 3)
print(x == y, x is y)

s = "hello"
print(s.replace("l", "x", 2))

nums = [1, 2, 3, 4]
squares = [n*n for n in nums if n % 2 == 0]
print(squares)

a = {1, 2, 3}
b = {4, 5, 6}
print(a & b, a | b)

x = [1, 2, 3]
print(all(x), any(x))

f = lambda x : x**2
print(f(5))

a = [lambda x : x+ i for i in range(3)]
print(a)

class A:
  def __init__(self) -> None:
      self.x = 10
a = A()
b = a
a.x = 20
print(b.x)

class A:
  def __init__(self) -> None:
    print("A")
class B(A):
  def __init__(self) -> None:
    super().__init__()
    print("B")

b= B()

class A:
    x = 5
a1 = A()
a2 = A()
a1.x = 10
print(a1.x, a2.x, A.x)

class A:
  def __str__(self) -> str:
      return "Class A"
print(A())

def f(a, b, /, c, d, *, e, f):
  print(a, b, c, d, e, f)
f(1, 2, 3, d = 4, e = 5, f = 6)

def f(x= []):
  x.append(1)
  return x
print(f())
print(f())

def f():
  try:
    return 1
  finally:
    return 2
print(f())
print(f())

def gen():
    yield 1
    yield 2
    yield 3

g = gen()
print(next(g))
print(list(g))

def outer():
  x = 10
  def inner():
    nonlocal x
    x += 5
    return x
  return inner()
print(outer())

x = [[0]*2]*2
x[0][0] = 1
print(x)

name = input("What is your name ?")
print(name)

print(name)

s = "123"
print(s.isdigit())

nums = [1, 2, 3, 4]
nums.append([4,5])
print(nums)

nums = [1, 2, 3, 4]
print(nums[1:3])

nums = [1, 2, 3, 4]
nums.extend([4, 5])
print(nums)

nums = [1, 2, 3]
print(nums * 2)

s = [1, 2, 3, 4]
b = s
b[0] = 89
print(s)
print(b)

t = (1, 2, 3)
print(len(t))

t = (1,)
print(type(t))

d = {"x": 100, "y" : 70}
print(d["x"])

d  = {"x": 100, "y" : 70}
print(d.get("z", "not found"))

d = {}
d["name"] = "alice"
print(d)

s = set()
print(type(s))

s = "hello"
print(s.find("l", 2))

text = "python"
print(text.replace("py", "my"))

name = "sangita"
age = 19
print(f" my name is {name} and age is {age}")

s = "programming"
print(s.count("m"))

s = "  hello    "
print(s.strip())

nums = [i**2 for i in range(5)]
print(nums)

nums = [1, 2, 3, 4, 5]
print(x for x in nums if x % 2 == 0)

a = [[1, 2], [3, 4]]
print(a[1][0])

nums = [10, 20, 30, 40]
nums.insert(2, 89)
print(nums)

nums = [10, 20, 30, 40]
print(nums[::-3])

s = {i for i in range(5)}
print(s)

d = {"a": 100, "b": 500}
for k, v in d.items():
  print(k, v)

d = dict.fromkeys(["a", "b", "c"], 0)
print(d)

x = [1, 2, 3]
for i in x:
  x.remove(i)
print(x)

for else block in Python ?
for i in range(3):
  print(i)
else:
  print("finished")

def f(a, b, c=10):
    return a+b+c
print(f(1,2))

def f(*args):
  return sum(args)
print(f(a=1, b=2, 3))

def f(**kwargs):
  print(kwargs)
f(a=1, b=2)

def f(x=[]):
    x.append(1)
    return x
print(f())
print(f())
print(f())

# 1. write a program to calculate the total bill amount including 18% GST.
bill = float(input("Enter the amount:"))
gst = bill * 0.18
total = bill + gst
print(total)

# 2. Write a program to split a restaurant bill equally among freinds.
bill = float(input("Enter the amount: "))
freinds = int(input("Enter the number of freinds: "))
total_bill = bill / freinds
print(total_bill)

# 3. Write a progarm to calculate monthly EMI for a loan.
loan_amount = float(input("Enter the amount: "))
rate_of_interest = float(input("Enter the rate of interest: "))
time = int(input("Enter the time: "))
print((loan_amount * rate_of_interest * ((1 + rate_of_interest) ** time)) / (((1 + rate_of_interest) ** time) - 1))

# 4. write a program to convert minutes into hours and minutes.
minutes = int(input("Enter the minutes: "))
hours = minutes // 60
minutes = minutes % 60
print(f" hours: {hours}, minutes: {minutes}")

# 5. write a program to convert indian rupees to US dollars(user given exchange rate).
indian_rs = float(input("Enter the amount: "))
exchange_rate = float(input("Enter the rate: "))
us_dollar = indian_rs / exchange_rate
print(us_dollar)

# 6. Write a program to find the discount price of an item.
item_price = int(input("Enter the amount: "))
discount = int(input("Enter the discount: ")) / 100
discount_price = item_price * discount
print(discount_price)

# 7. Write a program to calculate electricity bill based on units consumed.
per_unit = 10
unit = int(input("Enter the unit: "))
electricity_bill = per_unit * unit
print(electricity_bill)

# 8. write a program to calculate taxi fare based on distance.
per_km = 50
distance = int(input("Enter the distance: "))
taxi_fare = per_km * distance
print(taxi_fare)

# 9. Write a program to find the perimeter and area of a rectangle(user input length and width).
width = int(input("Enter the width: "))
length = int(input("Enter the length: "))
perimeter = 2 * (width + length)
area = width + length
print(f" Perimeter : {perimeter}, Area : {area}")

# 10. Write a program to display the current date and time.
from datetime import datetime
now = datetime.now()
print(now.strftime("%Y-%m-%d %H:%M:%S"))

# 11. Write a program to print the day of the week for today.
from datetime import datetime
today = datetime.today()
print(today.strftime("%A"))

# 12. write a program to find number of days left untill your next birthday.
from datetime import date

def days_unitll_birthday(month, day):
    today = date.today()
    current_year = today.year
    birthday = date(current_year, month, day)

    if birthday < today:
       next_year = today.year + 1
       birthday = date(next_year, month, day)

    days_left = (birthday - today).days
    return days_left

print("Days untill next birthday: ",  days_unitll_birthday(11, 11))

# 13. write a program to check if the current year is a leap year .
year = int(input("Enter the year: "))
if (year % 4 == 0 and year% 100 != 0 or year % 400 == 0):
  print("Leap year")
else:
  print("not leap year")

# 14. Write a program to check if a users password is strong.
password = input("Enter the password: ")
if len(password) < 7:
  print("Password is strong")
else:
  print("Password is not strong")

# 15. Write a program to count how many times a word appears in a paragraph.
count = 0
paragraph = "i am a girl. my name is sangita bera. i am from raypur. sangita bera is a good girl."
word = "sangita"
for word in paragraph:
  if word == "sangita":
     count += 1
print(count)

# 16. Write a program to generate a random OTP(6 digits).
import random
def generate_otp(length):
  otp = ""
  for i in range(length):
    otp += str(random.randint(0, 9))
  return otp
print(generate_otp(6))

#17. Write a program to remove all punctuation from a sentence.
import string
def remove_punctuation(sentence):
  translator = str.maketrans('', '', string.punctuation)
  return sentence.translate(translator)
remove_punctuation("hello world !")

# 18. Write a program to check if a string is a palindrome.
string = input("Enter the string: ")
if string == string[:: -1]:
  print("palindrome")
else:
  print("not palindrome")

# write a program to calculate total shopping  cart value (take item prices as input).
item1 = int(input("enter the item price: "))
item2 = int(input("enter the item price: "))
item3 = int(input("enter the item price: "))
total = item1 + item2 + item3
print(total)

# 19. Write a program to remove all vowels from a string.
string = input("Enter the string:")
vowels = "aeiouAEIOU"
result = ""
for char in string:
    if char not in vowels:
        result += char
print(result)

# 20. Write a program to check if a string is a valid email address.
import re
def is_valid_email(email):
    pattern = [r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$']
    for pat in pattern:
        if re.match(pat, email):
            return True
    return False
print(is_valid_email("john.mckinley@examplepetstore.com"))

# 21. Write a program to check if a string is a valid URL.
from urllib.parse import urlparse
def is_valid_url(url):
    parsed = urlparse(url)
    return all([parsed.scheme, parsed.netloc])
    print(is_valid_url("https://www.google.com"))

# 22. Write a program to check if a string is a valid JSON object.
import json
def is_valid_json(json_str):
    try:
        json.loads(json_str)
        return True
    except ValueError:
        return False
print(is_valid_json('{"name": "sangita", "age": 19}'))

#23.Write a program to create an email ID from first name and last name.
first_name = input("Enter the first name: ")
last_name = input("Enter the last name: ")
print(f" the email id is : {first_name}{last_name}@gmail.com")

# write a program to calculate simple and compound interest.
P = int(input("Enter the principal: "))
r = int(input("Enter the rate: "))
t = int(input("Enter the time: "))
n = int(input("Enter the number of times interest is compounded: "))
simple_interest = (P * r * t) / 100
compound_interese = P * (1 + r / n) ** n*t
print(f""simple interest:" {simple_interest}, "compound interest: " {compound_interest}")

# write a program to print salary slip including HRA, DA, and deductions.

# write a program to check if a number is a prime number.
def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True
print(is_prime(13))

# write a program to calculate profit or loss.
raw_product_price = float(input("Enter the price: "))
selling_price = float(input("Enter the price: "))
if

# write a program to track expenses and find the total spent.
spent_1 = int(input("Enter the amount: "))
spent_2 = int(input("Enter the amount: "))
spent_3 = int(input("Enter the amount: "))
total = spent_1 + spent_2 + spent_3
print(total)

# write a program to split a given amount of money into the least number of notes.
def split_notes(amount):
    notes = [2000, 500, 100, 50, 20, 10, 5, 2, 1]
    result = {}
    for note in notes:
        if amount >= note:
           count = amount // note
           amount %= note
           result[note] = count
    return result
amt = int(input("Enter the amount: "))
notes_count = split_notes(amt)
print("\nSplit into notes: ")
for note , count in notes_count.items():
    print(f"{note} : {count}")

# write a progarm for a simple calculator.
a = int(input("Enter the amount: "))
b  = int(input("Enter the amount: "))
operator = input("Enter the amount: ")
if operator == "*" :
   print(a*b)
elif operator == "+" :
   print(a+b)
elif operator == "-" :
   print(a-b)
elif operator == "/" :
    print(a/b)
else:
  print("invalid operator selected, please select correct one to get the result accurately.")

# write a program to play a number guessing game.
import random
choice = random.randint(1, 5)
user_input = int(input("Enter the number: "))
if (choice == user_input):
   print("it's right answer.")
else:
  print("wrong answer.")

# write a program for a dice roll simulator.
import random
print(random.randint(1, 6))

# write a program for rock-paper-scissors game.
import random
user_input = input("Enter your choice (rock, paper, or scissor): ")
choices = ["rock", "paper", "scissor"]
computer_choice = random.choice(choices)

if user_input == computer_choice:
  print("it's a tie.")
elif (user_input == "rock" and computer_choice == "paper"):
  print("computer wins")
elif (user_input == "rock" and computer_choice == "scissor"):
    print("user wins")
elif (user_input == "paper" and computer_choice == "rock"):
    print("user wins")
elif (user_input == "paper" and computer_choice == "scissor"):
  print("computer wins")
elif (user_input == "scissor" and computer_choice == "rock"):
  print("computer wins")
elif (user_input == "scissor" and computer_choice == "paper"):
  print("user wins")
else:
  print("invalid input")

# write a program to simulate a simple coin toss.
import random
choices = ["head", "tail"]
choice = random.choice(choices)
print(choice)

# wtite a program to print a multiplication table of any number given by the user.
user_input = int(input("Enter the amount: "))
for i in range(1, 11):
   print(user_input * i)

# write a function to find the factorial of a number.
def fact(n):
  if (n == 0 or n == 1):
    return 1
  else:
    return n * fact(n-1)
print(fact(5))

# write a function to check if a number is prime.
def is_prime(n):
  if n < 2:
    return False
  for i in range(2, n):
    if n % i == 0:
      return False
  return True
print(is_prime(13))

# write a function that returns the largest of three numbers.
def largest(a, b, c):
  if a > b and a > c:
    return a
  elif b > a and b > c:
    return b
  else:
    return c
print(largest(8, 7, 9))

# write a function that checks if a string is a palindrome.
def is_palindrome(s):
  return s == s[::-1]
print(is_palindrome("madam"))

# write a function to calculate the area of a circle.
def area(r):
  return 3.14 * r * r
print(area(5))

# write a function that returns the sum of digits of a number.
def sum_of_digits(n):
  sum = 0
  while n > 0:
    sum += n % 10
    n //= 10
  return sum
print(sum_of_digits(123))

# write a function that reverse a string.
def reverse_str(string):
  return string[::-1]
print(reverse_str("string"))

# write a function to count vowels in a string.
def vowels_count(string):
  vowels = "aeiouAEIOU"
  count = 0
  for char in string:
    if char in vowels:
      count += 1
  return count
print(vowels_count("education"))

# write a function that fibonacci series up to n.
def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    else:
        fib_series = [0, 1]
        while len(fib_series) < n:
            next_fib = fib_series[-1] + fib_series[-2]
            fib_series.append(next_fib)
        return fib_series

print(fibonacci(5))

# write a function to calculate simple interest.
def simple_int(P, r, t):
  return (P*r*t) / 100
print(simple_int(123, 5, 6))

# write a function that checks if a given year is a leap year.
def leapyear(year):
  if (year % 4 == 0 and year % 100 != 0 or year %400 == 0):
    return "leapyear"
  else:
    "not leapyear"
print(leapyear(2024))

# write a function to find gcd of two numbers.
def gcd(a, b):
  while b != 0:
    a, b = b, a % b
  return a
print(gcd(12, 18))

# write a function to count how many uppercase and lowercases letters are in a string.
def count_case(string):
  uppercase_count = 0
  lowercase_count = 0
  for char in string:
    if char.isupper():
      uppercase_count += 1
    elif char.islower():
      lowercase_count += 1
  return f"Uppercase count: {uppercase_count}, Lowercase count: {lowercase_count}"
print(count_case("Sangita"))

# write a function to check if two strings are anagrams.
def is_anagram(string1, string2):
  if len(string1) != len(string2):
    return False
  string1 = string1.lower()
  string2 = string2.lower()
  return sorted(string1) == sorted(string2)
print(is_anagram("listen", "silent"))

# write a function that accepts a list of numbers and returns the average.
def numbers(list):
  return sum(list) / len(list)
print(numbers([1, 2, 3, 4, 5]))

# write a function to remove duplicates from a list.
def duplicate_re(list):
  return set(list)
print(duplicate_re([1, 4, 4, 1, 6, 7]))

# write a function that accepts variable arguements(*args) and returns their sum.
def arguements(*args):
  return sum(args)
print(arguements(2, 3, 5, 6))

# write a function that accepts keyword arguements(**kwargs) and prints them.
def kw_arg(**kwargs):
  return dict(kwargs)
print(kw_arg(a = 1, b = 0))

# write a recursive function calculate the factorial of a number.
def fact(n):
  if ( n == 0 or n == 1):
    return 1
  else:
    return n * fact(n - 1)
print(fact(5))

# write a recursive function to print numbers from 1 to n.
def print_numbers(n):
  if n == 0:
    return
  else:
    print_numbers(n-1)
    print(n)
print(print_numbers(5))

# write a recursive function to calculate the sum of digits of a number.
def sum_of_digits(n):
  if n == 0 :
    return 0
  else:
    return n % 10 + sum_of_digits(n // 10)
print(sum_of_digits(123))

# write a recursive function to print numbers from n down to 1.
def print_numbers(n):
  if n == 0:
    return
  else:
    print(n)
    print_numbers(n-1)
print(print_numbers(6))

# write a recursive function to calculate the factorial of a number.
def fact(n):
  if n == 0 or n == 1:
    return 1
  else:
    return n * fact(n-1)
print(fact(6))

# write a recursive function to calculate the sum of first n natural numbers.
def sum_of_digits(n):
  if n == 0:
    return 0
  else:
    return n + sum_of_digits(n-1)
print(sum_of_digits(5))

# write a recursive function to check if a string is a palindrome.
def is_palindrome(string):
  if len(string) <= 1:
    return True
  elif string[0] == string[-1]:
    return is_palindrome(string[1 : -1])
  else:
    return False
print(is_palindrome("madam"))

# write a recursive function to find the nth fibonacci number.
def fibonacci(n):
  if n <= 0:
    return 0
  elif n == 1:
    return 1
  else:
    return fibonacci(n-1) + fibonacci(n-2)
print(fibonacci(3))

# write a recursive function to calculate the power of a number(x^n).
def power_of_number(x, n):
  if n == 0 or x == 0:
    return 1
  else:
    return power_of_number(x ** n)
print(power_of_number(2, 3))

# write a recursive function to find the gcd of two numbers.
def gcd_of_numbers(a, b):
  while b != 0:
    return gcd_of_numbers(b, a % b)
  return a
print(gcd_of_numbers(12, 18))

# write a recursive function to calculate the sum of digits of a number.
def sum_of_digits(a):
  if a == 0:
    return 0
  else:
    return a % 10 + sum_of_digits(a // 10)
print(sum_of_digits(123))

# write a recursive function to reverse a string.
def reverse_string(string):
  if len(string) == 0:
    return string
  else:
    return reverse_string(string[1:]) + string[0]
print(reverse_string("sangita"))

# write a recursive function to count digits in a number.
def count_digits(n):
  if n == 0:
    return 0
  else:
    return 1 + count_digits(n // 10)
print(count_digits(123))

# write a recursive function to find the maximum element in a list.
def max_element(list):
  if len(list) == 1:
    return list[0]
  else:
    return max(list[0], max_element(list[1:]))
print(max_element([1, 3, 5, 7, 9]))

# write a recursive function to find the  minimum element in a list.
def min_element(list):
  if len(list) == 1:
    return list[0]
  else:
    return min(list[0], min_element(list[1:]))
print(min_element([1, 3, 5, 7, 9]))

# write a recursive function to calculate the sum of all elements in a list.
def sum_of_elements(list):
  if len(list) == 0:
    return 0
  else:
    return list[0] + sum_of_elements(list[1:])
print(sum_of_elements([4, 7, 5, 6]))

# write a recursive function to check if a list is sorted.
def is_sorted(list):
  if len(list) <= 1:
    return True
  elif list[0] > list[1]:
    return False
  else:
    return is_sorted(list[1:])
print(is_sorted([1, 3, 7, 8]))

# write a recursive function to search for an element in a list(linear search).
def linear_search(list, element):
  if len(list) == 0:
    return False
  elif list[0] == element:
    return True
  else:
    return linear_search(list[1:], element)
print(linear_search([1, 3, 7, 8], 3))

# write a recursive function to count occurances of an element in a list.
def count_occurances(list, element):
  if len(list) == 0:
    return 0
  elif list[0] == element:
    return 1 + count_occurances(list[1:], element)
  else:
    return count_occurances(list[1:], element)
print(count_occurances([4, 7, 5, 3, 9, 7], 7))

# write a recursive function to remove duplicates from a list.
def remove_duplicates(list):
  if len(list) == 0:
    return []
  elif list[0] in list[1:]:
    return remove_duplicates(list[1:])
  else:
    return [list[0]] + remove_duplicates(list[1:])
print(remove_duplicates([2, 7, 5, 8, 4, 7, 2]))

# write a recursive function to reverse a list.
def reverse_list(list):
  if len(list) == 0:
    return []
  else:
    return reverse_list(list[1:]) + [list[0]]
print(reverse_list([2, 7, 5, 8, 4]))

# write a recursive function to find the product of elements in a list.
def product_of_elements(list):
  if len(list) == 0:
    return 1
  else:
    return list[0] * product_of_elements(list[1:])
print(product_of_elements([4, 8, 6, 9]))

# write a recursive function to merge two sorted lists.
def merge_sorted_lists(list1, list2):
  if len(list1) == 0:
    return list2
  elif len(list2) == 0:
    return list1
  else:
    return merge_sorted_lists(list1[1:], list2) + [list1[0]]
print(merge_sorted_lists([1, 3, 5], [2, 4, 6]))

# write a recursive function to count vowels in a string.
def count_vowels(string):
  if len(string) == 0:
    return 0
  elif string[0] in "aeiouAEIOU":
    return 1 + count_vowels(string[1:])
  else:
    return count_vowels(string[1:])
print(count_vowels("hsangita"))

# write a recursive function to replace all vowels in a string with *.
def replace_vowels(string):
  if len(string) == 0:
    return ""
  elif string[0] in "aeiouAEIOU":
    return "*" + replace_vowels(string[1:])
  else:
    return string[0] + replace_vowels(string[1:])
print(replace_vowels("sangita"))

# write a recursive function to find the first uppercase letter in a string.
def first_uppercase(string):
  if len(string) == 0:
    return None
  elif string[0].isupper():
    return string[0]
  else:
    return first_uppercase(string[1:])
print(first_uppercase("String"))

# write a recursive function to count words in a sentence.
def count_words(string):
  if len(string) == 0:
    return 0
  elif string[0] == " ":
    return 1 + count_words(string[1:])
  else:
    return count_words(string[1:])
print(count_words("This is a sentence"))

# write a recursive function to generate all subsets of a set.
def generate_subsets(set):
  if len(set) == 0:
    return [[]]
  else:
    subsets = generate_subsets(set[1:])
    return subsets + [[set[0]] + subset for subset in subsets]

print(generate_subsets([1, 2, 3]))

# write a recursive function to generate all permutations of string.
def permutations(string):
  if len(string) == 0:
    return [""]  # Return a list containing an empty string for the base case
  else:
    perms = []
    for i in range(len(string)):
      char = string[i]
      remaining_chars = string[:i] + string[i+1:]
      for perm in permutations(remaining_chars):
        perms.append(char + perm)
    return perms # Return the list of permutations
print(permutations("string"))

# write a recursive function to solve the Tower of Hanoi problem.
def tower_of_hanoi(n, source, destination, auxiliary):
  if n == 1:
    print(f"Move disk 1 from {source} to {destination}")
    return

# write a recursive function to solve the binary search algorithm.
def binary_search(list, element):
  if len(list) == 0:
    return False
  else:
    mid = len(list) // 2
    if list[mid] == element:
      return True
  print(list[mid])
  if list[mid] < element:
    return binary_search(list[mid + 1:], element)
  else:
    return binary_search(list[:mid], element)
print(binary_search([1, 8, 7, 6], 4))

# write a recursive function to flatten a nested list (e.g- [1, [2, [3, 4]], 5] -> [1, 2, 3, 4, 5]).
def flatten_list(nested_list):
  if len(nested_list) == 0:
    return []
  elif isinstance(nested_list[0], list):
    return flatten_list(nested_list[0]) + flatten_list(nested_list[1:])
  else:
    return [nested_list[0]] + flatten_list(nested_list[1:])
print(flatten_list([1, [2, [3, 4]], 5]))

# write a program to store a dictionary into a file in JSON format.
def store_dictionary(dictionary, filename):
  import json
  with open(filename, "w") as file:
    json.dump(dictionary, file)
print(store_dictionary({"name": "Sangita", "age": 20}, "data.json"))

# write a program to read student records from a CSV file and display them.
def read_student_records(filename):
  import csv
  with open(filename, "r") as file:
    reader = csv.reader(file)
    for row in reader:
      print(row)
print(read_student_records("students.csv"))

# write a program to write a list of numbers into a file, one per line.
def write_numbers(numbers, filename):
  with open(filename, "w") as file:
    for number in numbers:
      file.write(str(number) + "\n")
print(write_numbers([1, 2, 3, 4, 5], "numbers.txt"))

# write a program to read file line by line and store it into a list.
def read_lines(filename):
  with open(filename, "r") as file:
    lines = file.readlines()
    return [line.strip() for line in lines]